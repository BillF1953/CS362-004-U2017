----------------- Testing UpdateCoins----------------
TEST PASSED: Receives 3 cards
TEST PASSED: Deck has the same number of cards
TEST PASSED: Six extra coins received
TEST PASSED: Same Players Turn
TEST PASSED: Number of actions
TEST PASSED: Number of Buys
TEST PASSED: Number of Cards Discarded
TEST PASSED: Game State Invariants
----------------- Testing isGameOver----------------
TEST PASSED: Game over: No province Cards
TEST PASSED: Receives No cards
TEST PASSED: Deck has the same number of cards
TEST PASSED: No extra coins received
TEST PASSED: Same Players Turn
TEST PASSED: Number of actions
TEST PASSED: Number of Buys
TEST PASSED: Number of Cards Discarded
TEST FAILED Card 3 Supply Count Changed
TEST PASSED: Game over: Curse and Adventurer have no Cards
TEST PASSED: Receives No cards
TEST PASSED: Deck has the same number of cards
TEST PASSED: No extra coins received
TEST PASSED: Same Players Turn
TEST PASSED: Number of actions
TEST PASSED: Number of Buys
TEST PASSED: Number of Cards Discarded
TEST FAILED Card 0 Supply Count Changed
TEST FAILED Card 7 Supply Count Changed
TEST PASSED: Game over: Curse, Adventurer, Gold have no Cards
TEST PASSED: Receives No cards
TEST PASSED: Deck has the same number of cards
TEST PASSED: No extra coins received
TEST PASSED: Same Players Turn
TEST PASSED: Number of actions
TEST PASSED: Number of Buys
TEST PASSED: Number of Cards Discarded
TEST FAILED Card 0 Supply Count Changed
TEST FAILED Card 6 Supply Count Changed
TEST FAILED Card 7 Supply Count Changed
TEST PASSED: Game over: Curse, Adventurer, Gold and Province no Cards
TEST PASSED: Receives No cards
TEST PASSED: Deck has the same number of cards
TEST PASSED: No extra coins received
TEST PASSED: Same Players Turn
TEST PASSED: Number of actions
TEST PASSED: Number of Buys
TEST PASSED: Number of Cards Discarded
TEST FAILED Card 0 Supply Count Changed
TEST FAILED Card 3 Supply Count Changed
TEST FAILED Card 6 Supply Count Changed
TEST FAILED Card 7 Supply Count Changed
----------------- Testing endTurn----------------
TEST PASSED: Next Player Turn
TEST PASSED: Discard Pile has 5 more cards
TEST PASSED: Old Player has nom more cards
TEST PASSED: New player has five cards
TEST PASSED: Number of outposts reset
TEST PASSED: Phase Reset
TEST PASSED: 1 Buys
TEST FAILED: No Played Cards
TEST PASSED: No impossible number of coins
----------------- Testing numHandCards----------------
TEST PASSED: Five Cards in Hand at Start of State
TEST PASSED: Deck has the same number of cards
TEST PASSED: No extra coins received
TEST PASSED: Same Players Turn
TEST PASSED: Number of actions
TEST PASSED: Number of Buys
TEST PASSED: Number of Cards Discarded
TEST PASSED: Game State Invariants
TEST PASSED: Six Cards in Hand
TEST PASSED: Deck has the same number of cards
TEST PASSED: No extra coins received
TEST PASSED: Same Players Turn
TEST PASSED: Number of actions
TEST PASSED: Number of Buys
TEST PASSED: Number of Cards Discarded
TEST PASSED: Game State Invariants
TEST PASSED: Five Cards in Hand
TEST PASSED: Deck has the same number of cards
TEST PASSED: No extra coins received
TEST PASSED: Same Players Turn
TEST PASSED: Number of actions
TEST PASSED: Number of Buys
TEST PASSED: Number of Cards Discarded
TEST PASSED: Game State Invariants
----------------- Testing Smithy Card: smithy ----------------
TEST PASSED: Receives 3 cards
TEST PASSED: Deck has 3 less Cards
TEST PASSED: No extra coins received
TEST PASSED: Same Players Turn
TEST PASSED: Number of actions
TEST PASSED: Number of Buys
TEST PASSED: Number of Cards Discarded
TEST PASSED: Game State Invariants
----------------- Testing Great Hall Card: great_hall ----------------
TEST PASSED: Receives 1 cards
TEST PASSED: Deck has 1 less Cards
TEST PASSED: No extra coins received
TEST PASSED: Same Player's Turn
TEST PASSED: Number of actions
TEST PASSED: Number of Buys
TEST PASSED: Number of Cards Discarded
TEST PASSED: Game State Invariants
----------------- Testing Council Room Card: council_room ----------------
TEST PASSED: Receives 4 cards
TEST PASSED: Deck has 4 less Cards
TEST FAILED: No extra coins received
TEST PASSED: Same Player's Turn
TEST PASSED: Number of actions
TEST PASSED: Number of Buys
TEST PASSED: Number of Cards Discarded
TEST FAILED: Deck Count for non-action player Changed
----------------- Testing Adventurer Card State: adventurer ----------------
--------------------Test Case Copper, Copper, Gold ------------TEST FAILED: Receives 2 cards
TEST PASSED: First Treasure is Copper
TEST PASSED: Second Treasure is Copper
TEST PASSED: Deck has 2 less Cards
TEST PASSED: No extra coins received
TEST PASSED: Same Player's Turn
TEST PASSED: Number of actions
TEST PASSED: Number of Buys
TEST FAILED: Number of Cards Discarded
TEST PASSED: Game State Invariants
--------------------Test Case Gold, Province, Silver ------------TEST FAILED: Receives 2 cards
TEST PASSED: First Treasure is Gold
TEST PASSED: Second Treasure is Silver
TEST PASSED: Deck has 3 less Cards
TEST PASSED: No extra coins received
TEST PASSED: Same Player's Turn
TEST PASSED: Number of actions
TEST PASSED: Number of Buys
TEST FAILED: Number of Cards Discarded
TEST PASSED: Game State Invariants
File 'dominion.c'
Lines executed:33.28% of 577
Branches executed:28.24% of 432
Taken at least once:23.15% of 432
Calls executed:26.80% of 97
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 240 returned 100% blocks executed 83%
      240:    8:int compare(const void* a, const void* b) {
      240:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
unconditional  0 never executed
      240:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       64:   12:    return -1;
unconditional  0 taken 100%
      176:   13:  return 0;
unconditional  0 taken 100%
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
unconditional  0 never executed
        -:   19:}
        -:   20:
        -:   21:void great_hallAction(struct gameState*, int, int);
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
unconditional  0 never executed
        -:   37:}
        -:   38:
function initializeGame called 8 returned 100% blocks executed 83%
        8:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        8:   46:  SelectStream(1);
call    0 returned 100%
        8:   47:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   48:  
        -:   49:  //check number of players
        8:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
unconditional  0 never executed
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        8:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       88:   59:  for (i = 0; i < 10; i++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 91%
branch  3 taken 9% (fallthrough)
        -:   60:    {
      880:   61:      for (j = 0; j < 10; j++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 91%
branch  3 taken 9% (fallthrough)
        -:   62:        {
      800:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
unconditional  0 never executed
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        8:   75:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   76:    {
        8:   77:      state->supplyCount[curse] = 10;
unconditional  0 taken 100%
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
unconditional  0 never executed
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
unconditional  0 never executed
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        8:   89:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   90:    {
        8:   91:      state->supplyCount[estate] = 8;
        8:   92:      state->supplyCount[duchy] = 8;
        8:   93:      state->supplyCount[province] = 8;
unconditional  0 taken 100%
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
unconditional  0 never executed
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        8:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  104:  state->supplyCount[silver] = 40;
        8:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      168:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 95%
branch  3 taken 5% (fallthrough)
        -:  109:    {
     1320:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 94%
branch  3 taken 6% (fallthrough)
        -:  111:	{
     1240:  112:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       80:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  118:		    state->supplyCount[i] = 8; 
unconditional  0 never executed
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
unconditional  0 never executed
        -:  121:		}
        -:  122:	      else
        -:  123:		{
       80:  124:		  state->supplyCount[i] = 10;
unconditional  0 taken 100%
        -:  125:		}
       80:  126:	      break;
unconditional  0 taken 100%
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
     1160:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       24:  140:  for (i = 0; i < numPlayers; i++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 67%
branch  3 taken 33% (fallthrough)
        -:  141:    {
       16:  142:      state->deckCount[i] = 0;
       64:  143:      for (j = 0; j < 3; j++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 75%
branch  3 taken 25% (fallthrough)
        -:  144:	{
       48:  145:	  state->deck[i][j] = estate;
       48:  146:	  state->deckCount[i]++;
        -:  147:	}
      128:  148:      for (j = 3; j < 10; j++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 88%
branch  3 taken 13% (fallthrough)
        -:  149:	{
      112:  150:	  state->deck[i][j] = copper;
      112:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
       24:  156:  for (i = 0; i < numPlayers; i++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 67%
branch  3 taken 33% (fallthrough)
        -:  157:    {
       16:  158:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
unconditional  0 never executed
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
       24:  165:  for (i = 0; i < numPlayers; i++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 67%
branch  3 taken 33% (fallthrough)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
       16:  168:      state->handCount[i] = 0;
       16:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      224:  178:  for (i = 0; i <= treasure_map; i++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 96%
branch  3 taken 4% (fallthrough)
        -:  179:    {
      216:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        8:  184:  state->outpostPlayed = 0;
        8:  185:  state->phase = 0;
        8:  186:  state->numActions = 1;
        8:  187:  state->numBuys = 1;
        8:  188:  state->playedCardCount = 0;
        8:  189:  state->whoseTurn = 0;
        8:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       48:  194:  for (it = 0; it < 5; it++){
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 83%
branch  3 taken 17% (fallthrough)
       40:  195:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  196:  }
        -:  197:
        8:  198:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  199:
        8:  200:  return 0;
unconditional  0 taken 100%
        -:  201:}
        -:  202:
        -:  203:
function shuffle called 16 returned 100% blocks executed 94%
       16:  204:int shuffle(int player, struct gameState *state) {
        -:  205: 
        -:  206:
        -:  207:  int newDeck[MAX_DECK];
       16:  208:  int newDeckPos = 0;
        -:  209:  int card;
        -:  210:  int i;
        -:  211:
       16:  212:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  213:    return -1;
unconditional  0 never executed
       16:  214:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  215:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  216:
      192:  217:  while (state->deckCount[player] > 0) {
unconditional  0 taken 100%
branch  1 taken 91%
branch  2 taken 9% (fallthrough)
      160:  218:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      160:  219:    newDeck[newDeckPos] = state->deck[player][card];
      160:  220:    newDeckPos++;
      560:  221:    for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 71%
branch  3 taken 29% (fallthrough)
      400:  222:      state->deck[player][i] = state->deck[player][i+1];
        -:  223:    }
      160:  224:    state->deckCount[player]--;
unconditional  0 taken 100%
        -:  225:  }
      176:  226:  for (i = 0; i < newDeckPos; i++) {
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 91%
branch  3 taken 9% (fallthrough)
      160:  227:    state->deck[player][i] = newDeck[i];
      160:  228:    state->deckCount[player]++;
        -:  229:  }
        -:  230:
       16:  231:  return 0;
unconditional  0 taken 100%
unconditional  1 taken 100%
        -:  232:}
        -:  233:
function playCard called 0 returned 0% blocks executed 0%
    #####:  234:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  235:{	
        -:  236:  int card;
    #####:  237:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  238:
        -:  239:  //check if it is the right phase
    #####:  240:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  241:    {
    #####:  242:      return -1;
unconditional  0 never executed
        -:  243:    }
        -:  244:	
        -:  245:  //check if player has enough actions
    #####:  246:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  247:    {
    #####:  248:      return -1;
unconditional  0 never executed
        -:  249:    }
        -:  250:	
        -:  251:  //get card played
    #####:  252:  card = handCard(handPos, state);
call    0 never executed
        -:  253:	
        -:  254:  //check if selected card is an action
    #####:  255:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  256:    {
    #####:  257:      return -1;
unconditional  0 never executed
        -:  258:    }
        -:  259:	
        -:  260:  //play card
    #####:  261:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  262:    {
    #####:  263:      return -1;
unconditional  0 never executed
        -:  264:    }
        -:  265:	
        -:  266:  //reduce number of actions
    #####:  267:  state->numActions--;
        -:  268:
        -:  269:  //update coins (Treasure cards may be added with card draws)
    #####:  270:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  271:	
    #####:  272:  return 0;
unconditional  0 never executed
unconditional  1 never executed
        -:  273:}
        -:  274:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  275:int buyCard(int supplyPos, struct gameState *state) {
unconditional  0 never executed
        -:  276:  int who;
        -:  277:  if (DEBUG){
        -:  278:    printf("Entering buyCard...\n");
        -:  279:  }
        -:  280:
        -:  281:  // I don't know what to do about the phase thing.
        -:  282:
    #####:  283:  who = state->whoseTurn;
        -:  284:
    #####:  285:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  286:    if (DEBUG)
        -:  287:      printf("You do not have any buys left\n");
    #####:  288:    return -1;
unconditional  0 never executed
    #####:  289:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("There are not any of that type of card left\n");
    #####:  292:    return -1;
unconditional  0 never executed
    #####:  293:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  294:    if (DEBUG) 
        -:  295:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  296:    return -1;
unconditional  0 never executed
        -:  297:  } else {
    #####:  298:    state->phase=1;
        -:  299:    //state->supplyCount[supplyPos]--;
    #####:  300:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  301:  
    #####:  302:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  303:    state->numBuys--;
unconditional  0 never executed
        -:  304:    if (DEBUG)
        -:  305:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:  }
        -:  307:
        -:  308:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:  //state->discardCount[who]++;
        -:  310:    
    #####:  311:  return 0;
unconditional  0 never executed
        -:  312:}
        -:  313:
function numHandCards called 3 returned 100% blocks executed 100%
        3:  314:int numHandCards(struct gameState *state) {
        3:  315:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
unconditional  1 taken 100%
        -:  316:}
        -:  317:
function handCard called 0 returned 0% blocks executed 0%
    #####:  318:int handCard(int handPos, struct gameState *state) {
    #####:  319:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  320:  return state->hand[currentPlayer][handPos];
unconditional  0 never executed
        -:  321:}
        -:  322:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  323:int supplyCount(int card, struct gameState *state) {
    #####:  324:  return state->supplyCount[card];
unconditional  0 never executed
        -:  325:}
        -:  326:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:  int i;
    #####:  329:  int count = 0;
        -:  330:
    #####:  331:  for (i = 0; i < state->deckCount[player]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  332:    {
    #####:  333:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
        -:  334:    }
        -:  335:
    #####:  336:  for (i = 0; i < state->handCount[player]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  337:    {
    #####:  338:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
        -:  339:    }
        -:  340:
    #####:  341:  for (i = 0; i < state->discardCount[player]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  342:    {
    #####:  343:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
        -:  344:    }
        -:  345:
    #####:  346:  return count;
unconditional  0 never executed
        -:  347:}
        -:  348:
function whoseTurn called 9 returned 100% blocks executed 100%
        9:  349:int whoseTurn(struct gameState *state) {
        9:  350:  return state->whoseTurn;
unconditional  0 taken 100%
        -:  351:}
        -:  352:
function endTurn called 1 returned 100% blocks executed 93%
        1:  353:int endTurn(struct gameState *state) {
        -:  354:  int k;
        -:  355:  int i;
        1:  356:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  357:  
        -:  358:  //Discard hand
        6:  359:  for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 83%
branch  3 taken 17% (fallthrough)
        5:  360:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
        5:  361:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  362:  }
        1:  363:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:    
        -:  365:  //Code for determining the player
        1:  366:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  367:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
unconditional  0 taken 100%
        -:  368:  }
        -:  369:  else{
    #####:  370:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
unconditional  0 never executed
        -:  371:  }
        -:  372:
        1:  373:  state->outpostPlayed = 0;
        1:  374:  state->phase = 0;
        1:  375:  state->numActions = 1;
        1:  376:  state->coins = 0;
        1:  377:  state->numBuys = 1;
        1:  378:  state->playedCardCount = 0;
        1:  379:  state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:  //int k; move to top
        -:  382:  //Next player draws hand
        6:  383:  for (k = 0; k < 5; k++){
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 83%
branch  3 taken 17% (fallthrough)
        5:  384:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  385:  }
        -:  386:
        -:  387:  //Update money
        1:  388:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  389:
        1:  390:  return 0;
unconditional  0 taken 100%
        -:  391:}
        -:  392:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  393:int isGameOver(struct gameState *state) {
        -:  394:  int i;
        -:  395:  int j;
        -:  396:	
        -:  397:  //if stack of Province cards is empty, the game ends
        4:  398:  if (state->supplyCount[province] == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  399:    {
        2:  400:      return 1;
unconditional  0 taken 100%
        -:  401:    }
        -:  402:
        -:  403:  //if three supply pile are at 0, the game ends
        2:  404:  j = 0;
       52:  405:  for (i = 0; i < 25; i++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 96%
branch  3 taken 4% (fallthrough)
        -:  406:    {
       50:  407:      if (state->supplyCount[i] == 0)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        -:  408:	{
        5:  409:	  j++;
unconditional  0 taken 100%
        -:  410:	}
        -:  411:    }
        2:  412:  if ( j >= 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  413:    {
        1:  414:      return 1;
unconditional  0 taken 100%
        -:  415:    }
        -:  416:
        1:  417:  return 0;
unconditional  0 taken 100%
        -:  418:}
        -:  419:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  420:int scoreFor (int player, struct gameState *state) {
        -:  421:
        -:  422:  int i;
    #####:  423:  int score = 0;
        -:  424:  //score from hand
    #####:  425:  for (i = 0; i < state->handCount[player]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  426:    {
    #####:  427:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  428:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  429:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  430:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  431:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  432:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
unconditional  3 never executed
        -:  433:    }
        -:  434:
        -:  435:  //score from discard
    #####:  436:  for (i = 0; i < state->discardCount[player]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  437:    {
    #####:  438:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  439:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  440:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  441:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  442:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  443:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
unconditional  3 never executed
        -:  444:    }
        -:  445:
        -:  446:  //score from deck
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  448:    {
    #####:  449:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  450:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  451:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  452:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  453:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  454:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
unconditional  3 never executed
        -:  455:    }
        -:  456:
    #####:  457:  return score;
unconditional  0 never executed
        -:  458:}
        -:  459:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:  int i;	
        -:  462:  int j;
        -:  463:  int highScore;
        -:  464:  int currentPlayer;
        -:  465:
        -:  466:  //get score for each player
    #####:  467:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  468:    {
        -:  469:      //set unused player scores to -9999
    #####:  470:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  471:	{
    #####:  472:	  players[i] = -9999;
unconditional  0 never executed
        -:  473:	}
        -:  474:      else
        -:  475:	{
    #####:  476:	  players[i] = scoreFor (i, state);
call    0 never executed
unconditional  1 never executed
        -:  477:	}
        -:  478:    }
        -:  479:
        -:  480:  //find highest score
    #####:  481:  j = 0;
    #####:  482:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  483:    {
    #####:  484:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  485:	{
    #####:  486:	  j = i;
unconditional  0 never executed
        -:  487:	}
        -:  488:    }
    #####:  489:  highScore = players[j];
        -:  490:
        -:  491:  //add 1 to players who had less turns
    #####:  492:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  494:    {
    #####:  495:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  496:	{
    #####:  497:	  players[i]++;
unconditional  0 never executed
        -:  498:	}
        -:  499:    }
        -:  500:
        -:  501:  //find new highest score
    #####:  502:  j = 0;
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  504:    {
    #####:  505:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  506:	{
    #####:  507:	  j = i;
unconditional  0 never executed
        -:  508:	}
        -:  509:    }
    #####:  510:  highScore = players[j];
        -:  511:
        -:  512:  //set winners in array to 1 and rest to 0
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  514:    {
    #####:  515:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  516:	{
    #####:  517:	  players[i] = 1;
unconditional  0 never executed
        -:  518:	}
        -:  519:      else
        -:  520:	{
    #####:  521:	  players[i] = 0;
unconditional  0 never executed
        -:  522:	}
        -:  523:    }
        -:  524:
    #####:  525:  return 0;
unconditional  0 never executed
        -:  526:}
        -:  527:
function drawCard called 59 returned 100% blocks executed 38%
       59:  528:int drawCard(int player, struct gameState *state)
        -:  529:{	int count;
        -:  530:  int deckCounter;
       59:  531:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  532:    
        -:  533:    //Step 1 Shuffle the discard pile back into a deck
        -:  534:    int i;
        -:  535:    //Move discard to deck
    #####:  536:    for (i = 0; i < state->discardCount[player];i++){
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  537:      state->deck[player][i] = state->discard[player][i];
    #####:  538:      state->discard[player][i] = -1;
        -:  539:    }
        -:  540:
    #####:  541:    state->deckCount[player] = state->discardCount[player];
    #####:  542:    state->discardCount[player] = 0;//Reset discard
        -:  543:
        -:  544:    //Shufffle the deck
    #####:  545:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  546:   
        -:  547:    if (DEBUG){//Debug statements
        -:  548:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  549:    }
        -:  550:    
    #####:  551:    state->discardCount[player] = 0;
        -:  552:
        -:  553:    //Step 2 Draw Card
    #####:  554:    count = state->handCount[player];//Get current player's hand count
unconditional  0 never executed
        -:  555:    
        -:  556:    if (DEBUG){//Debug statements
        -:  557:      printf("Current hand count: %d\n", count);
        -:  558:    }
        -:  559:    
    #####:  560:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  561:
    #####:  562:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  563:      return -1;
unconditional  0 never executed
        -:  564:
    #####:  565:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  566:    state->deckCount[player]--;
    #####:  567:    state->handCount[player]++;//Increment hand count
unconditional  0 never executed
        -:  568:  }
        -:  569:
        -:  570:  else{
       59:  571:    int count = state->handCount[player];//Get current hand count for player
unconditional  0 taken 100%
        -:  572:    int deckCounter;
        -:  573:    if (DEBUG){//Debug statements
        -:  574:      printf("Current hand count: %d\n", count);
        -:  575:    }
        -:  576:
       59:  577:    deckCounter = state->deckCount[player];//Create holder for the deck count
       59:  578:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       59:  579:    state->deckCount[player]--;
       59:  580:    state->handCount[player]++;//Increment hand count
unconditional  0 taken 100%
        -:  581:  }
        -:  582:
       59:  583:  return 0;
unconditional  0 taken 100%
        -:  584:}
        -:  585:
function getCost called 0 returned 0% blocks executed 0%
    #####:  586:int getCost(int cardNumber)
        -:  587:{
    #####:  588:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  589:    {
        -:  590:    case curse:
    #####:  591:      return 0;
unconditional  0 never executed
        -:  592:    case estate:
    #####:  593:      return 2;
unconditional  0 never executed
        -:  594:    case duchy:
    #####:  595:      return 5;
unconditional  0 never executed
        -:  596:    case province:
    #####:  597:      return 8;
unconditional  0 never executed
        -:  598:    case copper:
    #####:  599:      return 0;
unconditional  0 never executed
        -:  600:    case silver:
    #####:  601:      return 3;
unconditional  0 never executed
        -:  602:    case gold:
    #####:  603:      return 6;
unconditional  0 never executed
        -:  604:    case adventurer:
    #####:  605:      return 6;
unconditional  0 never executed
        -:  606:    case council_room:
    #####:  607:      return 5;
unconditional  0 never executed
        -:  608:    case feast:
    #####:  609:      return 4;
unconditional  0 never executed
        -:  610:    case gardens:
    #####:  611:      return 4;
unconditional  0 never executed
        -:  612:    case mine:
    #####:  613:      return 5;
unconditional  0 never executed
        -:  614:    case remodel:
    #####:  615:      return 4;
unconditional  0 never executed
        -:  616:    case smithy:
    #####:  617:      return 4;
unconditional  0 never executed
        -:  618:    case village:
    #####:  619:      return 3;
unconditional  0 never executed
        -:  620:    case baron:
    #####:  621:      return 4;
unconditional  0 never executed
        -:  622:    case great_hall:
    #####:  623:      return 3;
unconditional  0 never executed
        -:  624:    case minion:
    #####:  625:      return 5;
unconditional  0 never executed
        -:  626:    case steward:
    #####:  627:      return 3;
unconditional  0 never executed
        -:  628:    case tribute:
    #####:  629:      return 5;
unconditional  0 never executed
        -:  630:    case ambassador:
    #####:  631:      return 3;
unconditional  0 never executed
        -:  632:    case cutpurse:
    #####:  633:      return 4;
unconditional  0 never executed
        -:  634:    case embargo: 
    #####:  635:      return 2;
unconditional  0 never executed
        -:  636:    case outpost:
    #####:  637:      return 5;
unconditional  0 never executed
        -:  638:    case salvager:
    #####:  639:      return 4;
unconditional  0 never executed
        -:  640:    case sea_hag:
    #####:  641:      return 4;
unconditional  0 never executed
        -:  642:    case treasure_map:
    #####:  643:      return 4;
unconditional  0 never executed
        -:  644:    }
        -:  645:	
    #####:  646:  return -1;
unconditional  0 never executed
        -:  647:}
        -:  648:
        -:  649:
function adventurerAction called 2 returned 100% blocks executed 87%
        2:  650:void adventurerAction(struct gameState *state, int currentPlayer){
        2:  651:  int cardDrawn, temphand[MAX_HAND], drawntreasure = 0, z = 0;
        -:  652:
        9:  653:  while(drawntreasure<2){
unconditional  0 taken 100%
branch  1 taken 71%
branch  2 taken 29% (fallthrough)
        5:  654:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  655:        if(currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  656:            shuffle(currentPlayer - 1, state);
call    0 never executed
unconditional  1 never executed
        -:  657:        }
        -:  658:    }
        5:  659:    drawCard(currentPlayer, state);
call    0 returned 100%
        5:  660:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        5:  661:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
        4:  662:      drawntreasure++;
unconditional  0 taken 100%
        -:  663:    else{
        1:  664:      temphand[z]=cardDrawn;
        1:  665:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1:  666:      z++;
unconditional  0 taken 100%
        -:  667:    }
        -:  668:  }
        5:  669:  while(z-1>=0){
unconditional  0 taken 100%
branch  1 taken 33%
branch  2 taken 67% (fallthrough)
        1:  670:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        1:  671:    z=z-1;
unconditional  0 taken 100%
        -:  672:  }
        -:  673:
        2:  674:}
        -:  675:
function smithyAction called 1 returned 100% blocks executed 89%
        1:  676:void smithyAction(struct gameState *state, int currentPlayer, int handPos){
        1:  677:  int i, j = 3;
        1:  678:  if(Random() < .04)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  679:  {
    #####:  680:      j = 4;
unconditional  0 never executed
        -:  681:  }
        4:  682:  for (i = 0; i < j; i++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 75%
branch  3 taken 25% (fallthrough)
        -:  683:  {
        3:  684:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  685:  }
        -:  686:  //discard card from hand
        1:  687:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  688:}
        -:  689:
function council_roomAction called 1 returned 100% blocks executed 100%
        1:  690:void council_roomAction(struct gameState* state, int currentPlayer, int handPos){
        -:  691:    int i;
        5:  692:    for (i = 0; i < 4; i++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 80%
branch  3 taken 20% (fallthrough)
        -:  693:    {
        4:  694:        drawCard(currentPlayer, state);
call    0 returned 100%
        -:  695:    }
        -:  696:
        -:  697:    //+1 Buy
        1:  698:    state->numBuys++;
        -:  699:
        -:  700:
        -:  701:    //Each other player draws a card
        3:  702:    for (i = 0; i < state->numPlayers; i++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 67%
branch  3 taken 33% (fallthrough)
        -:  703:    {
        -:  704:
        2:  705:        if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  706:        {
        1:  707:            if(i % 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  708:                state->coins++;
unconditional  0 taken 100%
        -:  709:            }
        -:  710:
        1:  711:            drawCard(i, state);
call    0 returned 100%
unconditional  1 taken 100%
        -:  712:
        -:  713:        }
        -:  714:    }
        -:  715:
        -:  716:    //put played card in played card pile
        1:  717:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  718:
        -:  719:
        1:  720:}
        -:  721:
function remodelAction called 0 returned 0% blocks executed 0%
    #####:  722:int remodelAction(struct gameState* state, int currentPlayer, int handPos, int choice1, int choice2 ){
        -:  723:    int j, i;
        -:  724:
    #####:  725:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  726:
    #####:  727:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  728:    {
    #####:  729:        return -1;
unconditional  0 never executed
        -:  730:    }
        -:  731:
    #####:  732:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  733:
        -:  734:    //discard card from hand
    #####:  735:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  736:
        -:  737:    //discard trashed card
    #####:  738:    for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  739:    {
    #####:  740:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  741:        {
    #####:  742:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  743:            break;
unconditional  0 never executed
        -:  744:        }
        -:  745:    }
        -:  746:
        -:  747:
        -:  748:
    #####:  749:}
unconditional  0 never executed
        -:  750:
function great_hallAction called 1 returned 100% blocks executed 100%
        1:  751:void great_hallAction(struct gameState *state, int currentPlayer, int handPos) {
        -:  752:    //+1 Card
        1:  753:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  754:
        -:  755:    //+1 Actions
        1:  756:    state->numActions++;
        -:  757:
        -:  758:    //discard card from hand
        1:  759:    if(Random() > .02){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:  760:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
unconditional  1 taken 100%
        -:  761:    }
        1:  762:}
        -:  763:
        -:  764:
function cardEffect called 5 returned 100% blocks executed 7%
        5:  765:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  766:{
        -:  767:  int i;
        -:  768:  int j;
        -:  769:  int k;
        -:  770:  int x;
        -:  771:  int index;
        5:  772:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        5:  773:  int nextPlayer = currentPlayer + 1;
        -:  774:
        5:  775:  int tributeRevealedCards[2] = {-1, -1};
        -:  776:  int temphand[MAX_HAND];// moved above the if statement
        5:  777:  int drawntreasure=0;
        -:  778:  int cardDrawn;
        5:  779:  int z = 0;// this is the counter for the temp hand
        5:  780:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  781:    nextPlayer = 0;
unconditional  0 never executed
        -:  782:  }
        -:  783:
        -:  784:  //refactored functions
        5:  785:    if(card == adventurer) {
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        2:  786:      adventurerAction(state, currentPlayer);
call    0 returned 100%
        2:  787:      return 0;
unconditional  0 taken 100%
        -:  788:    }
        3:  789:    else if (card == smithy){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  790:
        1:  791:      smithyAction(state, currentPlayer, handPos);
call    0 returned 100%
        1:  792:        return 0;
unconditional  0 taken 100%
        -:  793:    }
        2:  794:    else if(card == council_room){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  795:
        1:  796:        council_roomAction(state, currentPlayer, handPos);
call    0 returned 100%
        1:  797:        return 0;
unconditional  0 taken 100%
        -:  798:    }
        1:  799:    else if(card == remodel){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  800:
    #####:  801:     if(remodelAction(state, currentPlayer, handPos, choice1 ,choice2) == -1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  802:
    #####:  803:         return -1;
unconditional  0 never executed
        -:  804:     }
    #####:  805:        return 0;
unconditional  0 never executed
        -:  806:    }
        1:  807:    else if(card == great_hall){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  808:
        1:  809:        great_hallAction(state, currentPlayer, handPos);
call    0 returned 100%
        1:  810:        return 0;
unconditional  0 taken 100%
        -:  811:    }
        -:  812:
        -:  813:
        -:  814:
        -:  815:
        -:  816:	
        -:  817:  //uses switch to select card and perform actions
    #####:  818:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
        -:  819:    {
        -:  820: /**   case adventurer:
        -:  821:
        -:  822:      //drawntreasure, gstate, currentPlayer,
        -:  823:      while(drawntreasure<2){
        -:  824:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  825:	  shuffle(currentPlayer, state);
        -:  826:	}
        -:  827:	drawCard(currentPlayer, state);
        -:  828:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  829:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  830:	  drawntreasure++;
        -:  831:	else{
        -:  832:	  temphand[z]=cardDrawn;
        -:  833:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  834:	  z++;
        -:  835:	}
        -:  836:      }
        -:  837:      while(z-1>=0){
        -:  838:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  839:	z=z-1;
        -:  840:      }
        -:  841:      return 0;
        -:  842:			
        -:  843:    case council_room:
        -:  844:      //+4 Cards
        -:  845:      for (i = 0; i < 4; i++)
        -:  846:	{
        -:  847:	  drawCard(currentPlayer, state);
        -:  848:	}
        -:  849:			
        -:  850:      //+1 Buy
        -:  851:      state->numBuys++;
        -:  852:			
        -:  853:      //Each other player draws a card
        -:  854:      for (i = 0; i < state->numPlayers; i++)
        -:  855:	{
        -:  856:	  if ( i != currentPlayer )
        -:  857:	    {
        -:  858:	      drawCard(i, state);
        -:  859:	    }
        -:  860:	}
        -:  861:			
        -:  862:      //put played card in played card pile
        -:  863:      discardCard(handPos, currentPlayer, state, 0);
        -:  864:			
        -:  865:      return 0; **/
        -:  866:			
        -:  867:    case feast:
        -:  868:      //gain card with cost up to 5
        -:  869:      //Backup hand
    #####:  870:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  871:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  872:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  873:      }
        -:  874:      //Backup hand
        -:  875:
        -:  876:      //Update Coins for Buy
    #####:  877:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  878:      x = 1;//Condition to loop on
    #####:  879:      while( x == 1) {//Buy one card
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
    #####:  880:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  881:	  if (DEBUG)
        -:  882:	    printf("None of that card left, sorry!\n");
        -:  883:
        -:  884:	  if (DEBUG){
        -:  885:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  886:	  }
        -:  887:	}
    #####:  888:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  889:	  printf("That card is too expensive!\n");
call    0 never executed
unconditional  1 never executed
        -:  890:
        -:  891:	  if (DEBUG){
        -:  892:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  893:	  }
        -:  894:	}
        -:  895:	else{
        -:  896:
        -:  897:	  if (DEBUG){
        -:  898:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  899:	  }
        -:  900:
    #####:  901:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  902:	  x = 0;//No more buying cards
unconditional  0 never executed
        -:  903:
        -:  904:	  if (DEBUG){
        -:  905:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  906:	  }
        -:  907:
        -:  908:	}
        -:  909:      }     
        -:  910:
        -:  911:      //Reset Hand
    #####:  912:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  913:	state->hand[currentPlayer][i] = temphand[i];
    #####:  914:	temphand[i] = -1;
        -:  915:      }
        -:  916:      //Reset Hand
        -:  917:      			
    #####:  918:      return 0;
unconditional  0 never executed
        -:  919:			
        -:  920:    case gardens:
    #####:  921:      return -1;
unconditional  0 never executed
        -:  922:			
        -:  923:    case mine:
    #####:  924:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  925:
    #####:  926:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  927:	{
    #####:  928:	  return -1;
unconditional  0 never executed
        -:  929:	}
        -:  930:		
    #####:  931:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  932:	{
    #####:  933:	  return -1;
unconditional  0 never executed
        -:  934:	}
        -:  935:
    #####:  936:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  937:	{
    #####:  938:	  return -1;
unconditional  0 never executed
        -:  939:	}
        -:  940:
    #####:  941:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  942:
        -:  943:      //discard card from hand
    #####:  944:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  945:
        -:  946:      //discard trashed card
    #####:  947:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  948:	{
    #####:  949:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  950:	    {
    #####:  951:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  952:	      break;
unconditional  0 never executed
        -:  953:	    }
        -:  954:	}
        -:  955:			
    #####:  956:      return 0;
unconditional  0 never executed
        -:  957:			
        -:  958:  /**  case remodel:
        -:  959:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  960:
        -:  961:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  962:	{
        -:  963:	  return -1;
        -:  964:	}
        -:  965:
        -:  966:      gainCard(choice2, state, 0, currentPlayer);
        -:  967:
        -:  968:      //discard card from hand
        -:  969:      discardCard(handPos, currentPlayer, state, 0);
        -:  970:
        -:  971:      //discard trashed card
        -:  972:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  973:	{
        -:  974:	  if (state->hand[currentPlayer][i] == j)
        -:  975:	    {
        -:  976:	      discardCard(i, currentPlayer, state, 0);			
        -:  977:	      break;
        -:  978:	    }
        -:  979:	}
        -:  980:
        -:  981:
        -:  982:      return 0; **/
        -:  983:		
        -:  984:   /** case smithy:
        -:  985:      //+3 Cards
        -:  986:      for (i = 0; i < 3; i++)
        -:  987:	{
        -:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
        -:  990:			
        -:  991:      //discard card from hand
        -:  992:      discardCard(handPos, currentPlayer, state, 0);
        -:  993:      return 0; **/
        -:  994:		
        -:  995:    case village:
        -:  996:      //+1 Card
    #####:  997:      drawCard(currentPlayer, state);
call    0 never executed
        -:  998:			
        -:  999:      //+2 Actions
    #####: 1000:      state->numActions = state->numActions + 2;
        -: 1001:			
        -: 1002:      //discard played card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1004:      return 0;
unconditional  0 never executed
        -: 1005:		
        -: 1006:    case baron:
    #####: 1007:      state->numBuys++;//Increase buys by 1!
    #####: 1008:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1009:	int p = 0;//Iterator for hand!
    #####: 1010:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1011:	while(card_not_discarded){
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####: 1012:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1013:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1014:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1015:	    state->discardCount[currentPlayer]++;
    #####: 1016:	    for (;p < state->handCount[currentPlayer]; p++){
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1017:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1018:	    }
    #####: 1019:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1020:	    state->handCount[currentPlayer]--;
    #####: 1021:	    card_not_discarded = 0;//Exit the loop
unconditional  0 never executed
        -: 1022:	  }
    #####: 1023:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1024:	    if(DEBUG) {
        -: 1025:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1026:	      printf("Must gain an estate if there are any\n");
        -: 1027:	    }
    #####: 1028:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1029:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1030:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1031:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1032:		isGameOver(state);
call    0 never executed
unconditional  1 never executed
        -: 1033:	      }
        -: 1034:	    }
    #####: 1035:	    card_not_discarded = 0;//Exit the loop
unconditional  0 never executed
        -: 1036:	  }
        -: 1037:			    
        -: 1038:	  else{
    #####: 1039:	    p++;//Next card
unconditional  0 never executed
        -: 1040:	  }
        -: 1041:	}
        -: 1042:      }
        -: 1043:			    
        -: 1044:      else{
    #####: 1045:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1046:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1047:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1048:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1049:	    isGameOver(state);
call    0 never executed
unconditional  1 never executed
        -: 1050:	  }
        -: 1051:	}
        -: 1052:      }
        -: 1053:	    
        -: 1054:      
    #####: 1055:      return 0;
unconditional  0 never executed
        -: 1056:		
        -: 1057:  /**  case great_hall:
        -: 1058:      //+1 Card
        -: 1059:      drawCard(currentPlayer, state);
        -: 1060:			
        -: 1061:      //+1 Actions
        -: 1062:      state->numActions++;
        -: 1063:			
        -: 1064:      //discard card from hand
        -: 1065:      discardCard(handPos, currentPlayer, state, 0);
        -: 1066:      return 0; **/
        -: 1067:		
        -: 1068:    case minion:
        -: 1069:      //+1 action
    #####: 1070:      state->numActions++;
        -: 1071:			
        -: 1072:      //discard card from hand
    #####: 1073:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1074:			
    #####: 1075:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1076:	{
    #####: 1077:	  state->coins = state->coins + 2;
unconditional  0 never executed
        -: 1078:	}
        -: 1079:			
    #####: 1080:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1081:	{
        -: 1082:	  //discard hand
    #####: 1083:	  while(numHandCards(state) > 0)
unconditional  0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1084:	    {
    #####: 1085:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
unconditional  1 never executed
        -: 1086:	    }
        -: 1087:				
        -: 1088:	  //draw 4
    #####: 1089:	  for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1090:	    {
    #####: 1091:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1092:	    }
        -: 1093:				
        -: 1094:	  //other players discard hand and redraw if hand size > 4
    #####: 1095:	  for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1096:	    {
    #####: 1097:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1098:		{
    #####: 1099:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1100:		    {
        -: 1101:		      //discard hand
    #####: 1102:		      while( state->handCount[i] > 0 )
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
        -: 1103:			{
    #####: 1104:			  discardCard(handPos, i, state, 0);
call    0 never executed
unconditional  1 never executed
        -: 1105:			}
        -: 1106:							
        -: 1107:		      //draw 4
    #####: 1108:		      for (j = 0; j < 4; j++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1109:			{
    #####: 1110:			  drawCard(i, state);
call    0 never executed
        -: 1111:			}
        -: 1112:		    }
        -: 1113:		}
        -: 1114:	    }
        -: 1115:				
        -: 1116:	}
    #####: 1117:      return 0;
unconditional  0 never executed
        -: 1118:		
        -: 1119:    case steward:
    #####: 1120:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1121:	{
        -: 1122:	  //+2 cards
    #####: 1123:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1124:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1125:	}
    #####: 1126:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1127:	{
        -: 1128:	  //+2 coins
    #####: 1129:	  state->coins = state->coins + 2;
unconditional  0 never executed
        -: 1130:	}
        -: 1131:      else
        -: 1132:	{
        -: 1133:	  //trash 2 cards in hand
    #####: 1134:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1135:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -: 1136:	}
        -: 1137:			
        -: 1138:      //discard card from hand
    #####: 1139:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1140:      return 0;
unconditional  0 never executed
        -: 1141:		
        -: 1142:    case tribute:
    #####: 1143:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1144:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1145:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1146:	  state->deckCount[nextPlayer]--;
unconditional  0 never executed
        -: 1147:	}
    #####: 1148:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1149:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1150:	  state->discardCount[nextPlayer]--;
unconditional  0 never executed
        -: 1151:	}
        -: 1152:	else{
        -: 1153:	  //No Card to Reveal
        -: 1154:	  if (DEBUG){
        -: 1155:	    printf("No cards to reveal\n");
        -: 1156:	  }
        -: 1157:	}
        -: 1158:      }
        -: 1159:	    
        -: 1160:      else{
    #####: 1161:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1162:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1163:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1164:	    state->deckCount[nextPlayer]++;
    #####: 1165:	    state->discard[nextPlayer][i] = -1;
    #####: 1166:	    state->discardCount[nextPlayer]--;
        -: 1167:	  }
        -: 1168:			    
    #####: 1169:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
unconditional  1 never executed
        -: 1170:	} 
    #####: 1171:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1172:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1173:	state->deckCount[nextPlayer]--;
    #####: 1174:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1175:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1176:	state->deckCount[nextPlayer]--;
unconditional  0 never executed
        -: 1177:      }    
        -: 1178:		       
    #####: 1179:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1180:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1181:	state->playedCardCount++;
    #####: 1182:	tributeRevealedCards[1] = -1;
unconditional  0 never executed
        -: 1183:      }
        -: 1184:
    #####: 1185:      for (i = 0; i <= 2; i ++){
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1186:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1187:	  state->coins += 2;
unconditional  0 never executed
        -: 1188:	}
        -: 1189:		    
    #####: 1190:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1191:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1192:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1193:	}
        -: 1194:	else{//Action Card
    #####: 1195:	  state->numActions = state->numActions + 2;
unconditional  0 never executed
        -: 1196:	}
        -: 1197:      }
        -: 1198:	    
    #####: 1199:      return 0;
unconditional  0 never executed
        -: 1200:		
        -: 1201:    case ambassador:
    #####: 1202:      j = 0;		//used to check if player has enough cards to discard
        -: 1203:
    #####: 1204:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1205:	{
    #####: 1206:	  return -1;				
unconditional  0 never executed
        -: 1207:	}
        -: 1208:
    #####: 1209:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1210:	{
    #####: 1211:	  return -1;
unconditional  0 never executed
        -: 1212:	}
        -: 1213:
    #####: 1214:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1215:	{
    #####: 1216:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1217:	    {
    #####: 1218:	      j++;
unconditional  0 never executed
        -: 1219:	    }
        -: 1220:	}
    #####: 1221:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1222:	{
    #####: 1223:	  return -1;				
unconditional  0 never executed
        -: 1224:	}
        -: 1225:
        -: 1226:      if (DEBUG) 
        -: 1227:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1228:
        -: 1229:      //increase supply count for choosen card by amount being discarded
    #####: 1230:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1231:			
        -: 1232:      //each other player gains a copy of revealed card
    #####: 1233:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1234:	{
    #####: 1235:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1236:	    {
    #####: 1237:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
unconditional  1 never executed
        -: 1238:	    }
        -: 1239:	}
        -: 1240:
        -: 1241:      //discard played card from hand
    #####: 1242:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1243:
        -: 1244:      //trash copies of cards returned to supply
    #####: 1245:      for (j = 0; j < choice2; j++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1246:	{
    #####: 1247:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1248:	    {
    #####: 1249:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1250:		{
    #####: 1251:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1252:		  break;
unconditional  0 never executed
        -: 1253:		}
        -: 1254:	    }
        -: 1255:	}			
        -: 1256:
    #####: 1257:      return 0;
unconditional  0 never executed
        -: 1258:		
        -: 1259:    case cutpurse:
        -: 1260:
    #####: 1261:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1262:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1263:	{
    #####: 1264:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1265:	    {
    #####: 1266:	      for (j = 0; j < state->handCount[i]; j++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1267:		{
    #####: 1268:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1269:		    {
    #####: 1270:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1271:		      break;
unconditional  0 never executed
        -: 1272:		    }
    #####: 1273:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1274:		    {
    #####: 1275:		      for (k = 0; k < state->handCount[i]; k++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1276:			{
        -: 1277:			  if (DEBUG)
        -: 1278:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1279:			}	
    #####: 1280:		      break;
unconditional  0 never executed
        -: 1281:		    }		
        -: 1282:		}
        -: 1283:					
        -: 1284:	    }
        -: 1285:				
        -: 1286:	}				
        -: 1287:
        -: 1288:      //discard played card from hand
    #####: 1289:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1290:
    #####: 1291:      return 0;
unconditional  0 never executed
        -: 1292:
        -: 1293:		
        -: 1294:    case embargo: 
        -: 1295:      //+2 Coins
    #####: 1296:      state->coins = state->coins + 2;
        -: 1297:			
        -: 1298:      //see if selected pile is in play
    #####: 1299:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1300:	{
    #####: 1301:	  return -1;
unconditional  0 never executed
        -: 1302:	}
        -: 1303:			
        -: 1304:      //add embargo token to selected supply pile
    #####: 1305:      state->embargoTokens[choice1]++;
        -: 1306:			
        -: 1307:      //trash card
    #####: 1308:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1309:      return 0;
unconditional  0 never executed
        -: 1310:		
        -: 1311:    case outpost:
        -: 1312:      //set outpost flag
    #####: 1313:      state->outpostPlayed++;
        -: 1314:			
        -: 1315:      //discard card
    #####: 1316:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1317:      return 0;
unconditional  0 never executed
        -: 1318:		
        -: 1319:    case salvager:
        -: 1320:      //+1 buy
    #####: 1321:      state->numBuys++;
        -: 1322:			
    #####: 1323:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1324:	{
        -: 1325:	  //gain coins equal to trashed card
    #####: 1326:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1327:	  //trash card
    #####: 1328:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
unconditional  1 never executed
        -: 1329:	}
        -: 1330:			
        -: 1331:      //discard card
    #####: 1332:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1333:      return 0;
unconditional  0 never executed
        -: 1334:		
        -: 1335:    case sea_hag:
    #####: 1336:      for (i = 0; i < state->numPlayers; i++){
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1337:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1338:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1339:	  state->discardCount[i]++;
    #####: 1340:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
unconditional  0 never executed
        -: 1341:	}
        -: 1342:      }
    #####: 1343:      return 0;
unconditional  0 never executed
        -: 1344:		
        -: 1345:    case treasure_map:
        -: 1346:      //search hand for another treasure_map
    #####: 1347:      index = -1;
    #####: 1348:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1349:	{
    #####: 1350:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1351:	    {
    #####: 1352:	      index = i;
    #####: 1353:	      break;
unconditional  0 never executed
        -: 1354:	    }
        -: 1355:	}
    #####: 1356:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1357:	{
        -: 1358:	  //trash both treasure cards
    #####: 1359:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1360:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1361:
        -: 1362:	  //gain 4 Gold cards
    #####: 1363:	  for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1364:	    {
    #####: 1365:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1366:	    }
        -: 1367:				
        -: 1368:	  //return success
    #####: 1369:	  return 1;
unconditional  0 never executed
        -: 1370:	}
        -: 1371:			
        -: 1372:      //no second treasure_map found in hand
    #####: 1373:      return -1;
unconditional  0 never executed
        -: 1374:    }
        -: 1375:	
    #####: 1376:  return -1;
unconditional  0 never executed
unconditional  1 taken 100%
        -: 1377:}
        -: 1378:
        -: 1379:
        -: 1380:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1381:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1382:{
        -: 1383:	
        -: 1384:  //if card is not trashed, added to Played pile 
        3: 1385:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1386:    {
        -: 1387:      //add card to played pile
        3: 1388:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1389:      state->playedCardCount++;
unconditional  0 taken 100%
        -: 1390:    }
        -: 1391:	
        -: 1392:  //set played card to -1
        3: 1393:  state->hand[currentPlayer][handPos] = -1;
        -: 1394:	
        -: 1395:  //remove card from player's hand
        3: 1396:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1397:    {
        -: 1398:      //reduce number of cards in hand
    #####: 1399:      state->handCount[currentPlayer]--;
unconditional  0 never executed
        -: 1400:    }
        3: 1401:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1402:    {
        -: 1403:      //reduce number of cards in hand
    #####: 1404:      state->handCount[currentPlayer]--;
unconditional  0 never executed
        -: 1405:    }
        -: 1406:  else 	
        -: 1407:    {
        -: 1408:      //replace discarded card with last card in hand
        3: 1409:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1410:      //set last card to -1
        3: 1411:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1412:      //reduce number of cards in hand
        3: 1413:      state->handCount[currentPlayer]--;
unconditional  0 taken 100%
        -: 1414:    }
        -: 1415:	
        3: 1416:  return 0;
unconditional  0 taken 100%
        -: 1417:}
        -: 1418:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1419:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1420:{
        -: 1421:  //Note: supplyPos is enum of choosen card
        -: 1422:	
        -: 1423:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1424:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1425:    {
    #####: 1426:      return -1;
unconditional  0 never executed
        -: 1427:    }
        -: 1428:	
        -: 1429:  //added card for [whoseTurn] current player:
        -: 1430:  // toFlag = 0 : add to discard
        -: 1431:  // toFlag = 1 : add to deck
        -: 1432:  // toFlag = 2 : add to hand
        -: 1433:
    #####: 1434:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1435:    {
    #####: 1436:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1437:      state->deckCount[player]++;
unconditional  0 never executed
        -: 1438:    }
    #####: 1439:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1440:    {
    #####: 1441:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1442:      state->handCount[player]++;
unconditional  0 never executed
        -: 1443:    }
        -: 1444:  else
        -: 1445:    {
    #####: 1446:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1447:      state->discardCount[player]++;
unconditional  0 never executed
        -: 1448:    }
        -: 1449:	
        -: 1450:  //decrease number in supply pile
    #####: 1451:  state->supplyCount[supplyPos]--;
        -: 1452:	 
    #####: 1453:  return 0;
unconditional  0 never executed
        -: 1454:}
        -: 1455:
function updateCoins called 10 returned 100% blocks executed 100%
       10: 1456:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1457:{
        -: 1458:  int i;
        -: 1459:	
        -: 1460:  //reset coin count
       10: 1461:  state->coins = 0;
        -: 1462:
        -: 1463:  //add coins for each Treasure card in player's hand
       63: 1464:  for (i = 0; i < state->handCount[player]; i++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 84%
branch  3 taken 16% (fallthrough)
        -: 1465:    {
       53: 1466:      if (state->hand[player][i] == copper)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -: 1467:	{
       40: 1468:	  state->coins += 1;
unconditional  0 taken 100%
        -: 1469:	}
       13: 1470:      else if (state->hand[player][i] == silver)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -: 1471:	{
        1: 1472:	  state->coins += 2;
unconditional  0 taken 100%
        -: 1473:	}
       12: 1474:      else if (state->hand[player][i] == gold)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -: 1475:	{
        1: 1476:	  state->coins += 3;
unconditional  0 taken 100%
        -: 1477:	}	
        -: 1478:    }	
        -: 1479:
        -: 1480:  //add bonus
       10: 1481:  state->coins += bonus;
        -: 1482:
       10: 1483:  return 0;
unconditional  0 taken 100%
        -: 1484:}
        -: 1485:
        -: 1486:
        -: 1487://end of dominion.c
        -: 1488:
